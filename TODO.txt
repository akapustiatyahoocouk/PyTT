========== IMMEDIATE PIPELINE ======================================
*   Extend the staticmethod .string() of ...ResourceFactory so that
    will accept optional *args and perform format() call internally.
    Currently works for GuiResources; use for all other 
    ...Resources.
*   Workspace now implements __enter__() and __exit__(). Ensure
    access synchronization by wrapping the bodies of all workspace
    API methods within a "with <workspace>:" block.
*   Retire WorkspaceError and derived exceptions - make them
    Workspace - layer TypeAliases to DatabaseErrors.
*   When an attempt is made to e.g. create two Accounts with the 
    same login, or two ActivityTypes with the same name, the DB 
    engine raises a very technical error message. For improved
    usability use DatabaseObjectAlreadyExistsError and add
    WorkspaceObjectAlreadyExistsError for the same situation.
*   Need to localize messages of db/workspace exceptions (Errors)
    using resources.
*   When opening a database that was recently (or is now) in use,
    an error is reported (which is proper), but the Admin Skin
    Main Frame starts off with views (should start without views).
*   Try to avoid string-style type hints. For example, consider
    SqliteDatabaseType.instance -> "SqliteDatabaseType" as opposed
    to UsersViewType.instance -> ViewType.
*   Implement shortcust something like Ctrl+Alt+X shall look through
    the menu bar' items of a Window (if there is a menu bar), locate
    the matching menu item and simulate invoking it.
*   Make sure TextArea's "enabled: bool" property works just like
    it does in ttk-based AWT fields.
*   Merge LocalizableSubsystem into Subsystem, essentially making
    all Subsystems localizable.
*   Make sure class constructors __init__(self,...) have proper
    docstrings (for public/protected constructors only!) or a 
    docstring "DO NOT USE DIRECTLY" for private constructors.
*   Clicking on a TextField doesn't give it the keyboard focus.
    Fix this. TextArea does not seem to have this problem.
*   Add readonly: bool property to TextField and TextArea, to be
    handled via the rd.WidgetRedirector()
*   AWT shall handle FocusEvents and MouseEvents.
*   Change AdminSkinSettings to use a single property 
    main_frame_bounds: Rectangle instead of 4 deparate properties
    main_frame_x, main_frame_y, main_frame_width and 
    main_frame_height.
*   For SqlDatabase handle the exceptions raised by 
    rollback_transaction properly - chaining, not replacing, the
    exceptions that caused rollback attempts in their handlers.
*   Add context (right click) menu to awt TextField and other text
    entry fields, with Copy, Cut, Parse, etc. For disabled text
    entry widgets only Copy shall work. For password entry fields
    Copy/Cut must be disabled or absent.
*   In FileResourceBundle the '\' at the end of the line shoube 
    be treated as a continuation line.
*   In many places in code there is "pass". Check on these - usually
    they silence the exception handlers; at least print the 
    exceptions as a red flag for debug runs, and log them too for
    post-mortem analysis.
*   Change MenuItem's "label" property to "text".
*   Define class awt.GroupBox(tk.LabelFrame).

========== NEED TO DO EVENTUALLY ===================================
*   When several users access the same Workspace, it can be that
    one of them - an administrator - destroys or disables the 
    account under which the other user is logged in. In this case
    that "other" user must be notified and their PyTT instance
    must close its "current" workspace.
*   When importing a class/feature from a module in the same 
    package, use the "from .<module> import <feature>" form instead
    of the longer "from <fq module name> import <feature>" form.
    Make sure this happens throughout the code base.
*   Use menu item / action "description"s as tooltips for menu 
    items, button, etc.
*   Isolate tk/ttl within AWT.
    *   Only AWT modules should import tk/ttk; all other components
        shall happily do without.
    *   tk/ttk widget configuration (.configure, etc.) services
        shall be hidden behint AWT-level properties.
*   Define Color class in AWT, like java.awt.Color.
*   Define Point, Size and Rectangle classes in AWT and use them.

========== NICE TO HAVE ============================================
*   AWT compound controls (ListBox, ComboBox, TreeView, TabbedPane,
    etc.) should define classes for their contained items (e.g.
    ListBoxItem for ListBox, TreeNode for TreeView, TabPage for
    TabbedPane, etc.) and use them.
*   Create a new ActionMenuItem(MenuItem) class, for Action-based
    MenuItems. They should REJECT attempts to set their propertes 
    directly.
*   Database schema versioning and automatic schema upgrade.
